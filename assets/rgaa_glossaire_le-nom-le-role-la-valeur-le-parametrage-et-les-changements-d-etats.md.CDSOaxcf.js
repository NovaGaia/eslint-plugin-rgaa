import{_ as t,c as a,o as r,ag as n}from"./chunks/framework.BSOECjnK.js";const d=JSON.parse('{"title":"Le nom, le rôle, la valeur, le paramétrage et les changements d’états","description":"","frontmatter":{"title":"Le nom, le rôle, la valeur, le paramétrage et les changements d’états"},"headers":[],"relativePath":"rgaa/glossaire/le-nom-le-role-la-valeur-le-parametrage-et-les-changements-d-etats.md","filePath":"rgaa/glossaire/le-nom-le-role-la-valeur-le-parametrage-et-les-changements-d-etats.md"}'),o={name:"rgaa/glossaire/le-nom-le-role-la-valeur-le-parametrage-et-les-changements-d-etats.md"};function s(l,e,i,u,p,c){return r(),a("div",null,[...e[0]||(e[0]=[n('<h1 id="le-nom-le-role-la-valeur-le-parametrage-et-les-changements-d-etats" tabindex="-1">Le nom, le rôle, la valeur, le paramétrage et les changements d’états <a class="header-anchor" href="#le-nom-le-role-la-valeur-le-parametrage-et-les-changements-d-etats" aria-label="Permalink to &quot;Le nom, le rôle, la valeur, le paramétrage et les changements d’états&quot;">​</a></h1><p>Un composant doit avoir un rôle et un nom appropriés. Ses valeurs, états et paramètres éventuels doivent également être accessibles et correctement transmis aux APIs d’accessibilité notamment.</p><p>Un composant peut s’appuyer sur un élément interactif HTML ou sur un élément non interactif surchargé par WAI-ARIA via un rôle ad hoc. Important : les boutons (balises <code>&lt;button&gt;</code> ou <code>&lt;input type=&quot;button&quot;&gt;</code>) lorsqu’ils sont contrôlés via JavaScript sont à évaluer avec le {% crit 7.1 %}.</p><p>Le nom peut être l’intitulé du composant (l’intitulé d’un bouton, par exemple).</p><p>La valeur est, par exemple, l’élément sélectionné d’une liste déroulante ou la valeur actuelle d’un curseur (<code>slider</code>).</p><p>Le rôle correspond au type d’élément défini par la spécification HTML ou WAI-ARIA (comme la balise <code>&lt;button&gt;</code> ou l’attribut WAI-ARIA <code>role=&quot;button&quot;</code>).</p><p>Le paramétrage correspond aux informations particulières d’un composant, généralement mis à disposition par WAI-ARIA. Par exemple <code>aria-controls</code> est un paramètre qui transmet aux APIs l’information que le composant contrôle tel ou tel contenu (référencé par son identifiant -- attribut <code>id</code>).</p><p>Les changements d’état sont également mis à disposition par WAI-ARIA. Par exemple <code>aria-expanded</code> est un état permettant de signaler aux APIs que le composant est « ouvert » ou « fermé ». À noter qu’un état peut également être transmis via le nom, lorsque l’intitulé est changé dynamiquement pour correspondre à l’état de la zone contrôlée notamment.</p><p>Ces paramètres ne sont pas obligatoires mais peuvent être requis s’ils sont indispensables pour rendre le composant accessible. C’est à l’auditeur de considérer les cas où ces paramètres sont indispensables en fonction du contexte lié à l’utilisation du composant.</p><p>L’auditeur doit également vérifier que, lorsqu’ils sont présents, ces paramètres sont correctement utilisés.</p><p>Pour ce faire (s’il juge cela pertinent compte tenu du contexte d’implémentation des composants et des choix ergonomiques mis en œuvre) il peut s’appuyer sur les recommandations d’utilisation de WAI-ARIA pour les composants ayant des attributs WAI-ARIA correspondant à un motif de conception tel que décrit dans le document <span lang="en"><a href="http://www.w3.org/TR/wai-aria-practices/" target="_blank" rel="noreferrer">WAI-ARIA 1.1 Authoring Practices</a></span>.</p><p>Note : les rôles, propriétés et états WAI-ARIA s’implémentent via des attributs, par exemple <code>role=&quot;banner&quot;</code>, <code>aria-hidden=&quot;true&quot;</code>.</p>',12)])])}const g=t(o,[["render",s]]);export{d as __pageData,g as default};
